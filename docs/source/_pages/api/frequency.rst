Frequency Domain Module
=======================

.. contents:: Module Contents


Welch's Method
##############

.. py:function:: pyhrv.frequency_domain.welch_psd(nn=None, rpeaks=None, fbands=None, nfft=2**12, detrend=True, window='hamming', show=True, show_param=True, legend=True)

**Function Description:**

Computes a Power Spectral Density (PSD) estimation from the NNI series using the Welch's method and computes all
frequency domain parameters from this PSD according to the specified frequency bands. If no frequency bands are specified, the default frequency band limits for the *Very Low Frequency (VLF)*, *Low Frequency (LF)*, and *High Frequency (HF)* bands as recommended by the  `HRV Guidelines <https://www.ahajournals.org/doi/full/10.1161/01.cir.93
.5.1043>`_ are applied:

   * VLF:   [0.00Hz - 0.04Hz]
   * LF:    [0.04Hz - 0.15Hz]
   * HF:    [0.15Hz - 0.40Hz]

Use the ``fbands`` parameter to specify custom frequency bands and the possibility to add the *Ultra Low Frequency
(ULF)* band (see **Application Notes** & **Examples** below for more information).

The following parameters are computed from the PSD and the specified frequency bands:

   * Peak frequencies [Hz]
   * Absolute powers [ms^2]
   * Relative powers [ms^2]
   * Logarithmic powers [log]
   * Normalized powers (LF & HF only)[-]
   * Total power of all frequency bands [ms^2]

An example of a PSD plot generated by this function can be seen here:

.. figure:: /_static/welch_default.png

**Input Parameters**
   - ``nn`` (array): NN intervals in (ms) or (s).
   - ``rpeaks`` (array): R-peak times in (ms) or (s).
   - ``fbands`` (dict, optional): Dictionary with frequency band specifications (default: None)
   - ``nfft`` (int, optional): Number of points computed for the FFT result (default: 2**12)
   - ``detrend`` (bool, optional): If True, detrend NNI series by subtracting the mean NNI (default: True)
   - ``window`` (scipy.window function, optional): Window function used for PSD estimation (default: 'hamming')
   - ``show`` (bool, optional): If True, show PSD plot figure (default: True)
   - ``show_param`` (bool, optional): If true, list all computed PSD parameters next to the plot (default: True)
   - ``legend`` (bool, optional): If true, add a legend with frequency bands to the plot (default: True)

.. note::

   If ``fbands`` is none, the default values for the frequency bands will be set.

      * VLF:   [0.00Hz - 0.04Hz]
      * LF:    [0.04Hz - 0.15Hz]
      * HF:    [0.15Hz - 0.40Hz]

   See **Application Notes** & **Examples** below for more information on how to define custom frequency bands.

.. note::

   The specified ``nfft`` refers to the overall number of samples computed for the entire PSD estimation regardless of frequency bands, i.e. the number of samples within the lowest and the highest frequency band limit is not necessarily equal to the specified ``nfft``.

**Returns (ReturnTuple Object)**
   - ``fft_peak`` (tuple): Peak frequencies of all frequency bands [Hz]
   - ``fft_abs`` (tuple): Absolute powers of all frequency bands [ms^2]
   - ``fft_rel`` (tuple): Relative powers of all frequency bands [%]
   - ``fft_log`` (tuple): Logarithmic powers of all frequency bands [log]
   - ``fft_norm`` (tuple): Normalized powers of the LF and HF frequency bands [-]
   - ``fft_ratio`` (tuple): LF/HF ratio [-]
   - ``fft_total`` (tuple): Total power over all frequency bands [ms^2]
   - ``fft_interpolation`` (str): Interpolation method used for NNI interpolation (hard-coded to 'cubic')
   - ``fft_resampling_frequency`` (int): Resampling frequency used for NNI interpolation [Hz] (hard-coded to 4Hz as recommended by the `HRV Guidelines <https://www.ahajournals.org/doi/full/10.1161/01.cir.93.5.1043>`_)
   - ``fft_window`` (str): Spectral window used for PSD estimation of the Welch's method


**Computation Method**


**Application Notes**
If both ``nn`` and ``rpeaks`` are provided, the ``nn`` will be chosen over the ``rpeaks`` to avoid additional
computational costs.

``nn`` data provided in seconds (s) will automatically converted to milli seconds (ms). See section :ref:`ref-nnformat` for more information.

Incorrect frequency band specifications will be automatically corrected, if possible. For instance the following frequency bands contain overlapping frequency band limits which would cause issues when computing the frequency parameters:

.. code-block:: python

   fbands = {'vlf': (0.1, 0.25), 'lf': (0.2, 0.3), 'hf': (0.3, 0.4)}

Here, the upper band of the VLF band is greater than the lower band of the LF band. In this case, the overlapping frequency band limits will be switched:

.. code-block:: python

   fbands = {'vlf': (0.1, 0.2), 'lf': (0.25, 0.3), 'hf': (0.3, 0.4)}

Corrections of frequency bands trigger ``warnings`` which are displayed in the Python console. It is recommended to watch out for these warnings and to correct the provided frequency bands given that the corrected frequency bands might not be optimal. This issue can be seen here as there is no frequency band covering the range between 0.2Hz and 0.25Hz.

**Examples**

The following example code demonstrates how to use this function and how access the results stored in the ``biosppy.utils.ReturnTuple`` object. This example uses a NNI series from the ``pyhrv/samples/`` folder (see :ref:`ref-samples` for more information).

.. code-block:: python

   # Import packages
   import numpy as np
   import pyhrv.frequency_domain as fd

   # Load NNI sample series
   nni = np.load('./samples/series_1.npy')

   # Compute the PSD and frequency domain parameters
   result = fd.welch_psd(nn=nni)

   # Access peak frequencies using the key 'fft_peak'
   print(result['fft_peak'])

The plot of this example should look like the following plot:

.. figure:: /_static/welch_default.png

If you want to specify custom frequency bands, define the limits in a Python dictionary as shown in the following
example:

.. code-block:: python

   # Import packages
   import numpy as np
   import pyhrv.frequency_domain as fd

   # Load NNI sample series
   nni = np.load('./samples/series_1.npy')

   # Define custom frequency bands and add the ULF band
   fbands = {'ulf': (0.0, 0.1), 'vlf': (0.1, 0.2), 'lf': (0.2, 0.3), 'hf': (0.3, 0.4)}

   # Compute the PSD with custom frequency bands
   result = fd.welch_psd(nn=nni, fbands=fbands)

   # Access peak frequencies using the key 'fft_peak'
   print(result['fft_peak'])

The plot of this example should look like the following plot:

.. figure:: /_static/welch_custom.png

By default, the figure will contain the PSD plot on the left and the computed parameter results on the left side of the figure. Set the ``show_param`` to False if only the PSD is needed in the figure.

.. code-block:: python

   # Import packages
   import numpy as np
   import pyhrv.frequency_domain as fd

   # Load NNI sample series
   nni = np.load('./samples/series_1.npy')

   # Compute the PSD without the parameters being shown on the right side of the figure
   result = fd.welch_psd(nn=nni, show_param=False)

   # Access peak frequencies using the key 'fft_peak'
   print(result['fft_peak'])


The plot for this example should look like the following plot:

.. figure:: /_static/welch.png
   :scale: 30%
   :align: center


Frequency Parameters
####################


