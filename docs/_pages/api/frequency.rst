Frequency Domain Module
=======================

.. contents:: Module Contents

Welch's Method
##############

.. py:function:: pyhrv.frequency_domain.welch_psd(nn=None, rpeaks=None, fbands=None, nfft=2**12, detrend=True, window='hamming', show=True, show_param=True, legend=True)

**Function Description:**

Computes a Power Spectral Density (PSD) estimation from the NNI series using the Welch's method and computes all
frequency domain parameters from this PSD according to the specified frequency bands. If no frequency bands are specified, the default frequency band limits for the *Very Low Frequency (VLF)*, *Low Frequency (LF)*, and *High Frequency (HF)* bands as recommended by the  `HRV Guidelines <https://www.ahajournals.org/doi/full/10.1161/01.cir.93
.5.1043>`_ are applied:

   * VLF:   [0.00Hz - 0.04Hz]
   * LF:    [0.04Hz - 0.15Hz]
   * HF:    [0.15Hz - 0.40Hz]

Use the ``fbands`` parameter to specify custom frequency bands and the possibility to add the *Ultra Low Frequency
(ULF)* band (see **Application Notes** & **Examples** below for more information).

The following parameters are computed from the PSD and the specified frequency bands:

   * Peak frequencies [Hz]
   * Absolute powers [ms^2]
   * Relative powers [ms^2]
   * Logarithmic powers [log]
   * Normalized powers (LF & HF only)[-]
   * Total power of all frequency bands [ms^2]

An example of a PSD plot generated by this function can be seen here:

.. figure:: /_static/welch_default.png

**Input Parameters**
   - ``nn`` (array): NN intervals in (ms) or (s).
   - ``rpeaks`` (array): R-peak times in (ms) or (s).
   - ``fbands`` (dict, optional): Dictionary with frequency band specifications (default: None)
   - ``nfft`` (int, optional): Number of points computed for the FFT result (default: 2**12)
   - ``detrend`` (bool, optional): If True, detrend NNI series by subtracting the mean NNI (default: True)
   - ``window`` (scipy.window function, optional): Window function used for PSD estimation (default: 'hamming')
   - ``show`` (bool, optional): If True, show PSD plot figure (default: True)
   - ``show_param`` (bool, optional): If true, list all computed PSD parameters next to the plot (default: True)
   - ``legend`` (bool, optional): If true, add a legend with frequency bands to the plot (default: True)

.. note::

   If ``fbands`` is none, the default values for the frequency bands will be set.

      * VLF:   [0.00Hz - 0.04Hz]
      * LF:    [0.04Hz - 0.15Hz]
      * HF:    [0.15Hz - 0.40Hz]

   See **Application Notes** & **Examples** below for more information on how to define custom frequency bands.

.. note::

   The specified ``nfft`` refers to the overall number of samples computed for the entire PSD estimation regardless of frequency bands, i.e. the number of samples within the lowest and the highest frequency band limit is not necessarily equal to the specified ``nfft``.

**Returns (ReturnTuple Object)**
   - ``fft_peak`` (tuple): Peak frequencies of all frequency bands [Hz]
   - ``fft_abs`` (tuple): Absolute powers of all frequency bands [ms^2]
   - ``fft_rel`` (tuple): Relative powers of all frequency bands [%]
   - ``fft_log`` (tuple): Logarithmic powers of all frequency bands [log]
   - ``fft_norm`` (tuple): Normalized powers of the LF and HF frequency bands [-]
   - ``fft_ratio`` (float): LF/HF ratio [-]
   - ``fft_total`` (float): Total power over all frequency bands [ms^2]
   - ``fft_interpolation`` (str): Interpolation method used for NNI interpolation (hard-coded to 'cubic')
   - ``fft_resampling_frequency`` (int): Resampling frequency used for NNI interpolation [Hz] (hard-coded to 4Hz as recommended by the `HRV Guidelines <https://www.ahajournals.org/doi/full/10.1161/01.cir.93.5.1043>`_)
   - ``fft_window`` (str): Spectral window used for PSD estimation of the Welch's method

**Computation Method**

This functions computes the PSD estimation using the ``scipy.signals.lomb()`` function. The flowchart below visualizes the structure of this function. The NNI series are interpolated at a new sampling frequency of 4Hz before the PSD computation is conducted as the unevenly sampled NNI series would distort the PSD.

.. seealso::

   Section :ref:`ref-freqparams` for detailed information about the computation of the individual parameters.

.. image:: /_static/welch_psd.png
   :scale: 40%

**Application Notes**

If both ``nn`` and ``rpeaks`` are provided, the ``nn`` will be chosen over the ``rpeaks`` to avoid additional
computational costs.

``nn`` data provided in seconds (s) will automatically converted to milli seconds (ms). See section :ref:`ref-nnformat` for more information.

Incorrect frequency band specifications will be automatically corrected, if possible. For instance the following frequency bands contain overlapping frequency band limits which would cause issues when computing the frequency parameters:

.. code-block:: python

   fbands = {'vlf': (0.1, 0.25), 'lf': (0.2, 0.3), 'hf': (0.3, 0.4)}

Here, the upper band of the VLF band is greater than the lower band of the LF band. In this case, the overlapping frequency band limits will be switched:

.. code-block:: python

   fbands = {'vlf': (0.1, 0.2), 'lf': (0.25, 0.3), 'hf': (0.3, 0.4)}

Corrections of frequency bands trigger ``warnings`` which are displayed in the Python console. It is recommended to watch out for these warnings and to correct the provided frequency bands given that the corrected frequency bands might not be optimal. This issue can be seen here as there is no frequency band covering the range between 0.2Hz and 0.25Hz.

The resampling frequency and the interpolation methods used for this method are hardcoded to 4Hz and the cubic spline interpolation of the ``scipy.interpolate.interp1d()`` function.

**Examples**

The following example code demonstrates how to use this function and how access the results stored in the ``biosppy.utils.ReturnTuple`` object. This example uses a NNI series from the ``pyhrv/samples/`` folder (see :ref:`ref-samples` for more information).

.. code-block:: python

   # Import packages
   import numpy as np
   import pyhrv.frequency_domain as fd

   # Load NNI sample series
   nni = np.load('./samples/series_1.npy')

   # Compute the PSD and frequency domain parameters
   result = fd.welch_psd(nn=nni)

   # Access peak frequencies using the key 'fft_peak'
   print(result['fft_peak'])

The plot of this example should look like the following plot:

.. figure:: /_static/welch_default.png

If you want to specify custom frequency bands, define the limits in a Python dictionary as shown in the following example:

.. code-block:: python

   # Import packages
   import numpy as np
   import pyhrv.frequency_domain as fd

   # Load NNI sample series
   nni = np.load('./samples/series_1.npy')

   # Define custom frequency bands and add the ULF band
   fbands = {'ulf': (0.0, 0.1), 'vlf': (0.1, 0.2), 'lf': (0.2, 0.3), 'hf': (0.3, 0.4)}

   # Compute the PSD with custom frequency bands
   result = fd.welch_psd(nn=nni, fbands=fbands)

   # Access peak frequencies using the key 'fft_peak'
   print(result['fft_peak'])

The plot of this example should look like the following plot:

.. figure:: /_static/welch_custom.png

By default, the figure will contain the PSD plot on the left and the computed parameter results on the left side of the figure. Set the ``show_param`` to False if only the PSD is needed in the figure.

.. code-block:: python

   # Import packages
   import numpy as np
   import pyhrv.frequency_domain as fd

   # Load NNI sample series
   nni = np.load('./samples/series_1.npy')

   # Compute the PSD without the parameters being shown on the right side of the figure
   result = fd.welch_psd(nn=nni, show_param=False)

   # Access peak frequencies using the key 'fft_peak'
   print(result['fft_peak'])


The plot for this example should look like the following plot:

.. figure:: /_static/welch.png
   :scale: 30%
   :align: center

Lomb-Scargle Periodogram
########################

.. py:function:: pyhrv.frequency_domain.lomb_psd(nn=None, rpeaks=None, fbands=None, nfft=2**8, ma_size=None, show=True, show_param=True, legend=True)

**Function Description:**

Computes a Power Spectral Density (PSD) estimation from the NNI series using the Lomb-Scargle Periodogram and computes all frequency domain parameters from this PSD according to the specified frequency bands.

If no frequency bands are specified, the default frequency band limits for the *Very Low Frequency (VLF)*, *Low Frequency (LF)*, and *High Frequency (HF)* bands as recommended by the  `HRV Guidelines <https://www.ahajournals.org/doi/full/10.1161/01.cir.93
.5.1043>`_ are applied:

   * VLF:   [0.00Hz - 0.04Hz]
   * LF:    [0.04Hz - 0.15Hz]
   * HF:    [0.15Hz - 0.40Hz]

Use the ``fbands`` parameter to specify custom frequency bands and the possibility to add the *Ultra Low Frequency (ULF)* band (see **Application Notes** & **Examples** below for more information).

The following parameters are computed from the PSD and the specified frequency bands:

   * Peak frequencies [Hz]
   * Absolute powers [ms^2]
   * Relative powers [ms^2]
   * Logarithmic powers [log]
   * Normalized powers (LF & HF only)[-]
   * Total power of all frequency bands [ms^2]

An example of a PSD plot generated by this function can be seen here:

.. figure:: /_static/lomb_default.png

**Input Parameters**
   - ``nn`` (array): NN intervals in (ms) or (s).
   - ``rpeaks`` (array): R-peak times in (ms) or (s).
   - ``fbands`` (dict, optional): Dictionary with frequency band specifications (default: None)
   - ``nfft`` (int, optional): Number of points computed for the Lomb-Scargle result (default: 2**8)
   - ``ma_order`` (int, optional): Order of the moving average filter (default: None; no filter applied)
   - ``show`` (bool, optional): If True, show PSD plot figure (default: True)
   - ``show_param`` (bool, optional): If true, list all computed PSD parameters next to the plot (default: True)
   - ``legend`` (bool, optional): If true, add a legend with frequency bands to the plot (default: True)

.. note::

   If ``fbands`` is none, the default values for the frequency bands will be set:

      * VLF:   [0.00Hz - 0.04Hz]
      * LF:    [0.04Hz - 0.15Hz]
      * HF:    [0.15Hz - 0.40Hz]

   See **Application Notes** & **Examples** below to learn how to specify custom frequency bands.

.. note::

   The specified ``nfft`` refers to the overall number of samples computed for the entire PSD estimation regardless of frequency bands, i.e. the number of samples within the lowest and the highest frequency band limit is not necessarily equal to the specified ``nfft``.

**Returns (ReturnTuple Object)**
   - ``lomb_peak`` (tuple): Peak frequencies of all frequency bands [Hz]
   - ``lomb_abs`` (tuple): Absolute powers of all frequency bands [ms^2]
   - ``lomb_rel`` (tuple): Relative powers of all frequency bands [%]
   - ``lomb_log`` (tuple): Logarithmic powers of all frequency bands [log]
   - ``lomb_norm`` (tuple): Normalized powers of the LF and HF frequency bands [-]
   - ``lomb_ratio`` (float): LF/HF ratio [-]
   - ``lomb_total`` (float): Total power over all frequency bands [ms^2]
   - ``lomb_ma`` (int): Moving average filter order [-]

**Computation Method**

This functions computes the PSD estimation using the ``scipy.signals.lomb()`` function.

.. seealso::

   Section :ref:`ref-freqparams` for detailed information about the computation of the individual parameters.

**Application Notes**

If both ``nn`` and ``rpeaks`` are provided, the ``nn`` will be chosen over the ``rpeaks`` to avoid additional computational costs.

``nn`` data provided in seconds (s) will automatically converted to milli seconds (ms). See section :ref:`ref-nnformat` for more information.

Incorrect frequency band specifications will be automatically corrected, if possible. For instance the following frequency bands contain overlapping frequency band limits which would cause issues when computing the frequency parameters:

.. code-block:: python

   fbands = {'vlf': (0.1, 0.25), 'lf': (0.2, 0.3), 'hf': (0.3, 0.4)}

Here, the upper band of the VLF band is greater than the lower band of the LF band. In this case, the overlapping frequency band limits will be switched:

.. code-block:: python

   fbands = {'vlf': (0.1, 0.2), 'lf': (0.25, 0.3), 'hf': (0.3, 0.4)}

Corrections of frequency bands trigger ``warnings`` which are displayed in the Python console. It is recommended to watch out for these warnings and to correct the provided frequency bands given that the corrected frequency bands might not be optimal. This issue can be seen here as there is no frequency band covering the range between 0.2Hz and 0.25Hz.

**Examples**

The following example code demonstrates how to use this function and how access the results stored in the ``biosppy.utils.ReturnTuple`` object. This example uses a NNI series from the ``pyhrv/samples/`` folder (see :ref:`ref-samples` for more information).

.. code-block:: python

   # Import packages
   import numpy as np
   import pyhrv.frequency_domain as fd

   # Load NNI sample series
   nni = np.load('./samples/series_1.npy')

   # Compute the PSD and frequency domain parameters
   result = fd.lomb_psd(nn=nni)

   # Access peak frequencies using the key 'lomb_peak'
   print(result['lomb_peak'])

The plot of this example should look like the following plot:

.. figure:: /_static/lomb_default.png

If you want to specify custom frequency bands, define the limits in a Python dictionary as shown in the following example:

.. code-block:: python

   # Import packages
   import numpy as np
   import pyhrv.frequency_domain as fd

   # Load NNI sample series
   nni = np.load('./samples/series_1.npy')

   # Define custom frequency bands and add the ULF band
   fbands = {'ulf': (0.0, 0.1), 'vlf': (0.1, 0.2), 'lf': (0.2, 0.3), 'hf': (0.3, 0.4)}

   # Compute the PSD with custom frequency bands
   result = fd.lomb_psd(nn=nni, fbands=fbands)

   # Access peak frequencies using the key 'lomb_peak'
   print(result['lomb_peak'])

The plot of this example should look like the following plot:

.. figure:: /_static/lomb_custom.png

By default, the figure will contain the PSD plot on the left and the computed parameter results on the left side of the figure. Set the ``show_param`` to False if only the PSD is needed in the figure.

.. code-block:: python

   # Import packages
   import numpy as np
   import pyhrv.frequency_domain as fd

   # Load NNI sample series
   nni = np.load('./samples/series_1.npy')

   # Compute the PSD without the parameters being shown on the right side of the figure
   result = fd.lomb_psd(nn=nni, show_param=False)

   # Access peak frequencies using the key 'lomb_peak'
   print(result['fft_peak'])


The plot for this example should look like the following plot:

.. figure:: /_static/lomb.png
   :scale: 30%
   :align: center

Autoregressive Method
#####################

.. py:function:: pyhrv.frequency_domain.ar_psd(nn=None, rpeaks=None, fbands=None, nfft=2**12, order=16, show=True, show_param=True, legend=True)

**Function Description:**

Computes a Power Spectral Density (PSD) estimation from the NNI series using the Autoregressive method and computes all frequency domain parameters from this PSD according to the specified frequency bands.

If no frequency bands are specified, the default frequency band limits for the *Very Low Frequency (VLF)*, *Low Frequency (LF)*, and *High Frequency (HF)* bands as recommended by the  `HRV Guidelines <https://www.ahajournals.org/doi/full/10.1161/01.cir.93
.5.1043>`_ are applied:

   * VLF:   [0.00Hz - 0.04Hz]
   * LF:    [0.04Hz - 0.15Hz]
   * HF:    [0.15Hz - 0.40Hz]

Use the ``fbands`` parameter to specify custom frequency bands and the possibility to add the *Ultra Low Frequency (ULF)* band (see **Application Notes** & **Examples** below for more information).

The following parameters are computed from the PSD and the specified frequency bands:

   * Peak frequencies [Hz]
   * Absolute powers [ms^2]
   * Relative powers [ms^2]
   * Logarithmic powers [log]
   * Normalized powers (LF & HF only)[-]
   * Total power of all frequency bands [ms^2]

An example of a PSD plot generated by this function can be seen here:

.. figure:: /_static/ar_default.png

**Input Parameters**
   - ``nn`` (array): NN intervals in (ms) or (s).
   - ``rpeaks`` (array): R-peak times in (ms) or (s).
   - ``fbands`` (dict, optional): Dictionary with frequency band specifications (default: None)
   - ``nfft`` (int, optional): Number of points computed for the FFT result (default: 2**12)
   - ``order`` (int, optional): Autoregressive model order (default: 16)
   - ``show`` (bool, optional): If True, show PSD plot figure (default: True)
   - ``show_param`` (bool, optional): If true, list all computed PSD parameters next to the plot (default: True)
   - ``legend`` (bool, optional): If true, add a legend with frequency bands to the plot (default: True)

.. note::

   If ``fbands`` is none, the default values for the frequency bands will be set.

      * VLF:   [0.00Hz - 0.04Hz]
      * LF:    [0.04Hz - 0.15Hz]
      * HF:    [0.15Hz - 0.40Hz]

   See **Application Notes** & **Examples** below for more information on how to define custom frequency bands.

.. note::

   The specified ``nfft`` refers to the overall number of samples computed for the entire PSD estimation regardless of frequency bands, i.e. the number of samples within the lowest and the highest frequency band limit is not necessarily equal to the specified ``nfft``.

**Returns (ReturnTuple Object)**
   - ``ar_peak`` (tuple): Peak frequencies of all frequency bands [Hz]
   - ``ar_abs`` (tuple): Absolute powers of all frequency bands [ms^2]
   - ``ar_rel`` (tuple): Relative powers of all frequency bands [%]
   - ``ar_log`` (tuple): Logarithmic powers of all frequency bands [log]
   - ``ar_norm`` (tuple): Normalized powers of the LF and HF frequency bands [-]
   - ``ar_ratio`` (float): LF/HF ratio [-]
   - ``ar_total`` (float): Total power over all frequency bands [ms^2]
   - ``ar_interpolation`` (str): Interpolation method used for NNI interpolation (hard-coded to 'cubic')
   - ``ar_resampling_frequency`` (int): Resampling frequency used for NNI interpolation [Hz] (hard-coded to 4Hz as recommended by the `HRV Guidelines <https://www.ahajournals.org/doi/full/10.1161/01.cir.93.5.1043>`_)
   - ``ar_window`` (str): Spectral window used for PSD estimation of the Welch's method
   - ``ar_order`` (int): Autoregressive model order

**Computation Method**

This functions computes the PSD estimation using the ``spectrum.pyule()`` function. The flowchart below visualizes the structure of the ``ar_psd()`` function. The NNI series are interpolated at a new sampling frequency of 4Hz before the PSD computation is conducted as the unevenly sampled NNI series would distort the PSD.

.. seealso::

   Section :ref:`ref-freqparams` for detailed information about the computation of the individual parameters.

.. image:: /_static/welch_psd.png
   :scale: 40%

**Application Notes**

If both ``nn`` and ``rpeaks`` are provided, the ``nn`` will be chosen over the ``rpeaks`` to avoid additional computational costs.

``nn`` data provided in seconds (s) will automatically converted to milli seconds (ms). See section :ref:`ref-nnformat` for more information.

Incorrect frequency band specifications will be automatically corrected, if possible. For instance the following frequency bands contain overlapping frequency band limits which would cause issues when computing the frequency parameters:

.. code-block:: python

   fbands = {'vlf': (0.1, 0.25), 'lf': (0.2, 0.3), 'hf': (0.3, 0.4)}

Here, the upper band of the VLF band is greater than the lower band of the LF band. In this case, the overlapping frequency band limits will be switched:

.. code-block:: python

   fbands = {'vlf': (0.1, 0.2), 'lf': (0.25, 0.3), 'hf': (0.3, 0.4)}

Corrections of frequency bands trigger ``warnings`` which are displayed in the Python console. It is recommended to watch out for these warnings and to correct the provided frequency bands given that the corrected frequency bands might not be optimal. This issue can be seen here as there is no frequency band covering the range between 0.2Hz and 0.25Hz.

The resampling frequency and the interpolation methods used for this method are hardcoded to 4Hz and the cubic spline interpolation of the ``scipy.interpolate.interp1d()`` function.

**Examples**

The following example code demonstrates how to use this function and how access the results stored in the ``biosppy.utils.ReturnTuple`` object. This example uses a NNI series from the ``pyhrv/samples/`` folder (see :ref:`ref-samples` for more information).

.. code-block:: python

   # Import packages
   import numpy as np
   import pyhrv.frequency_domain as fd

   # Load NNI sample series
   nni = np.load('./samples/series_1.npy')

   # Compute the PSD and frequency domain parameters
   result = fd.ar_psd(nn=nni)

   # Access peak frequencies using the key 'ar_peak'
   print(result['ar_peak'])

The plot of this example should look like the following plot:

.. figure:: /_static/ar_default.png

If you want to specify custom frequency bands, define the limits in a Python dictionary as shown in the following example:

.. code-block:: python

   # Import packages
   import numpy as np
   import pyhrv.frequency_domain as fd

   # Load NNI sample series
   nni = np.load('./samples/series_1.npy')

   # Define custom frequency bands and add the ULF band
   fbands = {'ulf': (0.0, 0.1), 'vlf': (0.1, 0.2), 'lf': (0.2, 0.3), 'hf': (0.3, 0.4)}

   # Compute the PSD with custom frequency bands
   result = fd.ar_psd(nn=nni, fbands=fbands)

   # Access peak frequencies using the key 'ar_peak'
   print(result['ar_peak'])

The plot of this example should look like the following plot:

.. figure:: /_static/ar_custom.png

By default, the figure will contain the PSD plot on the left and the computed parameter results on the left side of the figure. Set the ``show_param`` to False if only the PSD is needed in the figure.

.. code-block:: python

   # Import packages
   import numpy as np
   import pyhrv.frequency_domain as fd

   # Load NNI sample series
   nni = np.load('./samples/series_1.npy')

   # Compute the PSD without the parameters being shown on the right side of the figure
   result = fd.ar_psd(nn=nni, show_param=False)

   # Access peak frequencies using the key 'ar_peak'
   print(result['ar_peak'])


The plot for this example should look like the following plot:

.. figure:: /_static/ar.png
   :scale: 30%
   :align: center


.. _ref-freqparams:

Frequency Parameters
####################
The following parameters and their computation formulas are computed from each of the PSD estimation methods computed
using the ``welch_psd()``, ``lomb_psd()``, and ``ar_psd()`` functions presented above.

.. note::

   The returned BioSppy ReturnTuple object contains all frequency band parameters in parameter specific tuples
   of length 4 when using the ULF frequency band or of length 3 when NOT using the ULF frequency band.
   The structures of those tuples are shown in this example below:

      Using ULF, VLF, LF and HF frequency bands:

      .. code-block:: python

         fft_results['fft_peak'] = (ulf_peak, vlf_peak, lf_peak, hf_peak)

      Using VLF, LF and HF frequency bands:

      .. code-block:: python

            fft_results['fft_peak'] = (vlf_peak, lf_peak, hf_peak)

**Absolute Powers**

The absolute powers [ms^2] are individually computed for each frequency band as the sum of the power over the
frequency band.

.. math::

   P_{abs} = \Delta f \sum_{f = f_{min}}^{f_{max}} S(f)

with:

   * :math:`P_{abs}`: Absolute power
   * :math:`\Delta f`: Frequency resolution
   * :math:`f_{min}`: Lower limit of the frequency band
   * :math:`f_{max}`: Upper limit of the frequency band
   * :math:`S(f)`: PSD function in dependence of the frequency :math:`f`

The absolute powers are stored in the ReturnTuple object and can be accessed with one of the following key depending
on the PSD method being used:

   * ``fft_abs`` as result of the  ``welch_psd()`` function
   * ``lomb_abs`` as result of the ``lomb_psd()`` function
   * ``ar_abs`` as result of the ``ar_psd()`` function

.. note::

   In case you are using the ``pyhrv.hrv()`` or the ``pyhrv.frequency_domain.frequency_domain()`` functions, you can
   use all the three keys listed above as all methods are computed using these functions.

**Total Power**

The total power [:math:`ms^2`] of the PSD is computed as the sum of the absolute powers of all frequency bands:

.. math::

   P_{Total} = P_{ULF} + P_{VLF} + P_{LF} + P_{HF}

with:

   * :math:`P_{Total}`: Total power
   * :math:`P_{ULF}`: Absolute power of the ULF frequency band (= 0 if ULF is not specified)
   * :math:`P_{VLF}`: Absolute power of the VLF frequency band
   * :math:`P_{LF}`: Absolute power of the LF frequency band
   * :math:`P_{HF}`: Absolute power of the HF frequency band

The total power is stored in the ReturnTuple object and can be accessed with one of the following key depending
on the PSD method being used:

   * ``fft_total`` as result of the  ``welch_psd()`` function
   * ``lomb_total`` as result of the ``lomb_psd()`` function
   * ``ar_total`` as result of the ``ar_psd()`` function

.. note::

   In case you are using the ``pyhrv.hrv()`` or the ``pyhrv.frequency_domain.frequency_domain()`` functions, you can
   use all the three keys listed above as all methods are computed using these functions.

**Relative Power**

The relative powers [:math:`a`] are computed as the ratio between the absolute power of a frequency band and the
total power:

.. math::

   P_{rel, z} = \frac{P_{abs,z}}{P_{Total}} * 100

with:

   * :math:`P_{rel, z}`: Relative power of the frequency band :math:`z`
   * :math:`P_{abs, z}`: Relative power of the frequency band :math:`z`
   * :math:`z`: Frequency band (ULF, VLF, LF or HF)
   * :math:`P_{Total}`: Total power over all frequency bands


The relative powers are stored in the ReturnTuple object and can be accessed with one of the following key depending
on the PSD method being used:

   * ``fft_rel`` as result of the  ``welch_psd()`` function
   * ``lomb_rel`` as result of the ``lomb_psd()`` function
   * ``ar_rel`` as result of the ``ar_psd()`` function

.. note::

   In case you are using the ``pyhrv.hrv()`` or the ``pyhrv.frequency_domain.frequency_domain()`` functions, you can
   use all the three keys listed above as all methods are computed using these functions.

**Logarithmic Powers**

The logarithmic powers [:math:`log(ms^2)`] are computed as follows total power:

.. math::

   P_{log, z} = log(P_{abs, z})

with:

   * :math:`P_{log, z}`: Logarithmic power of the frequency band :math:`z`
   * :math:`P_{abs, z}`: Absolute power of the frequency band :math:`z`
   * :math:`z`: Frequency band (ULF, VLF, LF or HF)


The logarithmic powers are stored in the ReturnTuple object and can be accessed with one of the following key depending
on the PSD method being used:

   * ``fft_log`` as result of the  ``welch_psd()`` function
   * ``lomb_log`` as result of the ``lomb_psd()`` function
   * ``ar_log`` as result of the ``ar_psd()`` function

.. note::

   In case you are using the ``pyhrv.hrv()`` or the ``pyhrv.frequency_domain.frequency_domain()`` functions, you can
   use all the three keys listed above as all methods are computed using these functions.

**Normalized Powers**

The normalized powers [-] are computed for and based on the LF and HF frequency parameters only according to the
following formulas:

.. math::

   P_{norm, LF} = \frac{P_{abs, LF}}{P_{abs, LF} + P_{abs, HF}} * 100

.. math::

   P_{norm, HF} = \frac{P_{abs, HF}}{P_{abs, LF} + P_{abs, HF}} * 100

with:

   * :math:`P_{norm, LF}`: Normalized power of the LF band
   * :math:`P_{abs, LF}`: Absolute power of the LF band
   * :math:`P_{norm, HF}`: Normalized power of the HF band
   * :math:`P_{abs, HF}`: Absolute power of the HF band

The normalized powers are stored in the ReturnTuple object and can be accessed with one of the following key depending
on the PSD method being used:

   * ``fft_norm`` as result of the  ``welch_psd()`` function
   * ``lomb_norm`` as result of the ``lomb_psd()`` function
   * ``ar_norm`` as result of the ``ar_psd()`` function

.. note::

   Independently of the specified frequency band (with or without the VLF band) the results of this parameter are
   always returned in a 2-element tuple. The first element is the normalized power of the LF band with the second
   being the normalized power of the HF band.

   .. code-block:: python

      fft_results['fft_norm'] = (lf_norm, hf_norm)

.. note::

   In case you are using the ``pyhrv.hrv()`` or the ``pyhrv.frequency_domain.frequency_domain()`` functions, you can
   use all the three keys listed above as all methods are computed using these functions.

**LF/HF Ratio**

The LF/HF ratio is computed based on the absolute powers of the LF and HF bands:

.. math::

   \frac{LF}{HF} = \frac{P_{abs, LF}}{P_{abs, HF}}

with:

   * :math:`P_{abs, LF}`: Absolute power of the LF band
   * :math:`P_{abs, HF}`: Absolute power of the HF band

The LF/HF ratio is stored in the ReturnTuple object and can be accessed with one of the following keys depending
on the PSD method being used:

   * ``fft_ratio`` (float) as result of the  ``welch_psd()`` function
   * ``lomb_ratio`` (float) as result of the ``lomb_psd()`` function
   * ``ar_ratio`` (float) as result of the ``ar_psd()`` function

.. note::

   Other than most of the other HRV frequency domain parameters, this parameter is always returned as a single float value
   rather than in a multi-element tuple or array.

   .. code-block:: python

      fft_results['fft_ratio'] = float(lf_hf_ratio)

.. note::

   In case you are using the ``pyhrv.hrv()`` or the ``pyhrv.frequency_domain.frequency_domain()`` functions, you can
   use all the three keys listed above as all methods are computed using these functions.


























